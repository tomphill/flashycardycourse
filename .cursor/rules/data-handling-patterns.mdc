---
description: 
globs: 
alwaysApply: true
---
# Data Handling Patterns

## Overview
This project follows strict patterns for data handling to ensure security, type safety, and performance. All data operations must follow these established patterns.

## üö® MANDATORY: Centralized Query Functions

### Database Query Organization
**CRITICAL REQUIREMENT**: ALL database operations (SELECT, INSERT, UPDATE, DELETE) MUST be performed through dedicated helper functions located in the `src/db/queries/` directory. NEVER perform direct database operations in components, server actions, or API routes.

#### Directory Structure
```
src/db/queries/
‚îú‚îÄ‚îÄ decks.ts      # Deck-related queries
‚îú‚îÄ‚îÄ cards.ts      # Card-related queries
‚îî‚îÄ‚îÄ index.ts      # Re-export all queries
```

#### Query Function Pattern
Every query function MUST follow this exact pattern:

```typescript
// src/db/queries/decks.ts
import { auth } from "@clerk/nextjs/server";
import { db } from '@/db';
import { decksTable } from '@/db/schema';
import { eq, and } from 'drizzle-orm';

export async function getUserDecks() {
  const { userId } = await auth();
  if (!userId) {
    throw new Error("Unauthorized");
  }
  
  return await db.select()
    .from(decksTable)
    .where(eq(decksTable.userId, userId));
}

export async function getDeckById(deckId: string) {
  const { userId } = await auth();
  if (!userId) {
    throw new Error("Unauthorized");
  }
  
  const deck = await db.select()
    .from(decksTable)
    .where(
      and(
        eq(decksTable.id, deckId),
        eq(decksTable.userId, userId)
      )
    )
    .limit(1);
    
  return deck[0] || null;
}

export async function createDeck(data: { title: string; description?: string }) {
  const { userId } = await auth();
  if (!userId) {
    throw new Error("Unauthorized");
  }
  
  const newDeck = await db.insert(decksTable)
    .values({
      ...data,
      userId,
    })
    .returning();
    
  return newDeck[0];
}

export async function updateDeck(deckId: string, data: { title?: string; description?: string }) {
  const { userId } = await auth();
  if (!userId) {
    throw new Error("Unauthorized");
  }
  
  const updatedDeck = await db.update(decksTable)
    .set(data)
    .where(
      and(
        eq(decksTable.id, deckId),
        eq(decksTable.userId, userId)
      )
    )
    .returning();
    
  return updatedDeck[0] || null;
}

export async function deleteDeck(deckId: string) {
  const { userId } = await auth();
  if (!userId) {
    throw new Error("Unauthorized");
  }
  
  await db.delete(decksTable)
    .where(
      and(
        eq(decksTable.id, deckId),
        eq(decksTable.userId, userId)
      )
    );
}
```

#### Query Re-exports
**MANDATORY**: Create an index file to re-export all queries:

```typescript
// src/db/queries/index.ts
export * from './decks';
export * from './cards';
```

## Data Retrieval Rules

### Server Components with Query Functions
**MANDATORY**: All data retrieval operations MUST be performed in Server Components using the centralized query functions.

```typescript
// ‚úÖ CORRECT: Data fetching in Server Component using query functions
import { getUserDecks } from '@/db/queries';

export default async function DashboardPage() {
  // Use centralized query function
  const userDecks = await getUserDecks();
    
  return <DecksList decks={userDecks} />;
}
```

```typescript
// ‚ùå WRONG: Direct database operations in components
import { auth } from "@clerk/nextjs/server";
import { db } from '@/db';
import { decksTable } from '@/db/schema';
import { eq } from 'drizzle-orm';

export default async function DashboardPage() {
  // ‚ùå This violates the centralized query rule
  const { userId } = await auth();
  if (!userId) redirect('/');
  
  const userDecks = await db.select()
    .from(decksTable)
    .where(eq(decksTable.userId, userId));
    
  return <DecksList decks={userDecks} />;
}
```

```typescript
// ‚ùå WRONG: Never fetch data in Client Components
"use client";
import { useEffect, useState } from 'react';

export default function DashboardPage() {
  const [decks, setDecks] = useState([]);
  
  useEffect(() => {
    // ‚ùå This violates the server component rule
    fetch('/api/decks').then(res => res.json()).then(setDecks);
  }, []);
  
  return <DecksList decks={decks} />;
}
```

## Database Mutations Rules

### Server Actions with Query Functions
**MANDATORY**: All database mutations MUST be performed via Server Actions that use the centralized query functions.

```typescript
// ‚úÖ CORRECT: Server Actions using centralized query functions
"use server";

import { createDeck, updateDeck, deleteDeck } from '@/db/queries';
import { z } from 'zod';

const CreateDeckSchema = z.object({
  title: z.string().min(1, "Title is required"),
  description: z.string().optional(),
});

type CreateDeckInput = z.infer<typeof CreateDeckSchema>;

export async function createDeckAction(input: CreateDeckInput) {
  // Validate input with Zod
  const validatedInput = CreateDeckSchema.parse(input);
  
  // Use centralized query function
  return await createDeck(validatedInput);
}

export async function updateDeckAction(deckId: string, input: Partial<CreateDeckInput>) {
  const validatedInput = CreateDeckSchema.partial().parse(input);
  
  // Use centralized query function
  return await updateDeck(deckId, validatedInput);
}

export async function deleteDeckAction(deckId: string) {
  // Use centralized query function
  await deleteDeck(deckId);
}
```

```typescript
// ‚ùå WRONG: Direct database operations in server actions
"use server";

import { auth } from "@clerk/nextjs/server";
import { db } from '@/db';
import { decksTable } from '@/db/schema';

export async function createDeckAction(input: CreateDeckInput) {
  // ‚ùå This violates the centralized query rule
  const { userId } = await auth();
  if (!userId) throw new Error("Unauthorized");
  
  const newDeck = await db.insert(decksTable).values({
    ...input,
    userId,
  }).returning();
  
  return newDeck[0];
}
```

```typescript
// ‚ùå WRONG: Never use API routes for database mutations
export async function POST(request: Request) {
  // ‚ùå This violates the server action rule
  const body = await request.json();
  return await db.insert(decksTable).values(body);
}
```

## Data Validation Rules

### Zod Validation Required
**MANDATORY**: All data validation MUST use Zod schemas. Every server action MUST validate its input parameters.

```typescript
// ‚úÖ CORRECT: Proper Zod validation
import { z } from 'zod';

const UpdateDeckSchema = z.object({
  id: z.string().uuid(),
  title: z.string().min(1, "Title is required").max(100, "Title too long"),
  description: z.string().max(500, "Description too long").optional(),
});

type UpdateDeckInput = z.infer<typeof UpdateDeckSchema>;

export async function updateDeck(input: UpdateDeckInput) {
  // Always validate first
  const validatedInput = UpdateDeckSchema.parse(input);
  
  const { userId } = await auth();
  if (!userId) throw new Error("Unauthorized");
  
  await db.update(decksTable)
    .set({
      title: validatedInput.title,
      description: validatedInput.description,
    })
    .where(
      eq(decksTable.id, validatedInput.id) && 
      eq(decksTable.userId, userId)
    );
}
```

### TypeScript Types Required
**MANDATORY**: Server actions MUST use proper TypeScript types derived from Zod schemas. Never use `FormData` as the parameter type.

```typescript
// ‚úÖ CORRECT: Proper TypeScript typing
const CardSchema = z.object({
  deckId: z.string().uuid(),
  front: z.string().min(1, "Front content required"),
  back: z.string().min(1, "Back content required"),
});

type CardInput = z.infer<typeof CardSchema>;

export async function createCard(input: CardInput) {
  const validatedInput = CardSchema.parse(input);
  // ... implementation
}
```

```typescript
// ‚ùå WRONG: Never use FormData as parameter type
export async function createCard(formData: FormData) {
  // ‚ùå This violates the TypeScript typing rule
  const front = formData.get('front') as string;
  const back = formData.get('back') as string;
}
```

## Complete Server Action Pattern

### Standard Template
Every server action should follow this pattern:

```typescript
"use server";

import { auth } from "@clerk/nextjs/server";
import { db } from '@/db';
import { tableName } from '@/db/schema';
import { eq } from 'drizzle-orm';
import { z } from 'zod';

// 1. Define Zod schema
const ActionSchema = z.object({
  // Define your fields with proper validation
  field1: z.string().min(1),
  field2: z.number().positive(),
});

// 2. Extract TypeScript type
type ActionInput = z.infer<typeof ActionSchema>;

// 3. Server action with proper typing
export async function performAction(input: ActionInput) {
  // 4. Validate input first
  const validatedInput = ActionSchema.parse(input);
  
  // 5. Check authentication
  const { userId } = await auth();
  if (!userId) {
    throw new Error("Unauthorized");
  }
  
  // 6. Perform database operation with user filtering
  const result = await db.insert(tableName)
    .values({
      ...validatedInput,
      userId,
    })
    .returning();
  
  return result[0];
}
```

## Client-Side Integration

### Form Handling with Server Actions
When using forms with server actions, follow this pattern:

```typescript
// Client Component
"use client";

interface FormProps {
  onSubmit: (input: CreateDeckInput) => Promise<void>;
}

export function CreateDeckForm({ onSubmit }: FormProps) {
  const handleSubmit = async (formData: FormData) => {
    const input: CreateDeckInput = {
      title: formData.get('title') as string,
      description: formData.get('description') as string,
    };
    
    await onSubmit(input);
  };
  
  return (
    <form action={handleSubmit}>
      <input name="title" required />
      <textarea name="description" />
      <button type="submit">Create Deck</button>
    </form>
  );
}
```

## Error Handling

### Validation Errors
Handle Zod validation errors appropriately:

```typescript
export async function serverAction(input: ActionInput) {
  try {
    const validatedInput = ActionSchema.parse(input);
    // ... perform action
  } catch (error) {
    if (error instanceof z.ZodError) {
      // Return validation errors to client
      throw new Error(`Validation failed: ${error.errors.map(e => e.message).join(', ')}`);
    }
    throw error;
  }
}
```

## FORBIDDEN Practices

### ‚ùå NEVER DO THESE:
1. **Perform direct database operations outside of `src/db/queries/` functions**
2. **Fetch data in Client Components**
3. **Use API routes for database mutations**
4. **Skip Zod validation in server actions**
5. **Use FormData as server action parameter type**
6. **Perform database operations without user authentication/filtering**
7. **Mix data fetching and mutations in the same function**
8. **Import `db` directly in components or server actions (use query functions only)**
9. **Duplicate authentication logic (it should be centralized in query functions)**

## Integration with Database Schema
Always reference the proper database schema from [src/db/schema.ts](mdc:src/db/schema.ts) and use the database connection from [src/db/index.ts](mdc:src/db/index.ts) **ONLY within the centralized query functions** in [src/db/queries/](mdc:src/db/queries).

## Security Integration
All data operations must integrate with the authentication patterns defined in [src/middleware.ts](mdc:src/middleware.ts) and follow user data isolation principles. **Authentication checks are centralized within the query functions**, eliminating duplication across components and server actions.

## Query Function Benefits
This centralized approach provides:
- **Security**: Authentication and authorization logic is centralized and consistent
- **Type Safety**: All database operations have proper TypeScript types
- **Performance**: Query optimization can be done in one place
- **Maintainability**: Database logic changes only require updates in query functions
- **Testing**: Easy to unit test individual query functions
- **Reusability**: Query functions can be shared across components and server actions

**REMEMBER**: These patterns ensure type safety, security, and performance. Always validate data, always filter by user, always use centralized query functions, and always use the proper Next.js patterns for data operations.
