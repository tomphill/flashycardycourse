---
description: 
globs: 
alwaysApply: true
---
# SHADCN/UI STRICT USAGE RULES

## üö® CRITICAL MANDATE
This project MUST use ONLY shadcn/ui components for ALL UI elements. ABSOLUTELY NO custom UI components are allowed.

**MANDATORY Rules:**
- ‚ùå NEVER create custom buttons, inputs, cards, modals, or any UI elements
- ‚ùå NEVER use raw HTML elements (div, button, input) for UI
- ‚ùå NEVER write custom CSS for components beyond Tailwind utilities
- ‚úÖ ALWAYS use shadcn/ui components for every UI element
- ‚úÖ ALWAYS compose complex UI by combining shadcn/ui components
- ‚úÖ This project is in dark mode so make sure there are no dark colored text on dark backgrounds (and vice versa)

## üõ°Ô∏è ENFORCEMENT POLICY
**NO EXCEPTIONS** - Every UI element must use shadcn/ui components. If a component doesn't exist in shadcn/ui, you must:
1. First check if it can be composed from existing components
2. If not, add the closest shadcn/ui component and adapt
3. NEVER create custom components

## üìã BEFORE CODING CHECKLIST
**Before creating any UI:** Run `npx shadcn@latest add [component-name]`

Required components for this project:
```bash
npx shadcn@latest add button
npx shadcn@latest add card  
npx shadcn@latest add input
npx shadcn@latest add dialog
npx shadcn@latest add form
npx shadcn@latest add badge
npx shadcn@latest add separator
npx shadcn@latest add avatar
npx shadcn@latest add progress
npx shadcn@latest add toast
npx shadcn@latest add alert
npx shadcn@latest add tabs
npx shadcn@latest add select
npx shadcn@latest add textarea
npx shadcn@latest add label
```

## üîê CLERK INTEGRATION REQUIREMENTS

### Authentication Buttons
All Clerk sign-in/sign-up buttons MUST use shadcn/ui Button components:

```tsx
import { SignInButton, SignUpButton } from "@clerk/nextjs";
import { Button } from "@/components/ui/button";

// ‚úÖ CORRECT - Using shadcn/ui Button
<SignInButton mode="modal">
  <Button variant="default">Sign In</Button>
</SignInButton>

<SignUpButton mode="modal">
  <Button variant="outline">Sign Up</Button>
</SignUpButton>

// ‚ùå WRONG - Custom button or raw HTML
<SignInButton>
  <button className="custom-btn">Sign In</button>
</SignInButton>
```

### Modal Requirements
Clerk MUST use modal mode with shadcn/ui Dialog components:

```tsx
import { SignInButton } from "@clerk/nextjs";
import { Dialog, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

// ‚úÖ CORRECT - Modal mode with shadcn/ui components
<SignInButton mode="modal">
  <Button>Access Dashboard</Button>
</SignInButton>
```

### User Profile Integration
```tsx
import { UserButton } from "@clerk/nextjs";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";

// ‚úÖ CORRECT - If customizing UserButton appearance
<UserButton 
  appearance={{
    elements: {
      avatarBox: "w-10 h-10", // Use Tailwind classes only
    }
  }}
/>
```

## üö´ ABSOLUTELY FORBIDDEN

### Never Create These:
- Custom Button components
- Custom Input/Form components  
- Custom Card components
- Custom Modal/Dialog components
- Custom Navigation components
- Custom Loading spinners
- Custom Icons (use Lucide React with shadcn/ui)
- Custom Tooltips or Popovers

### Never Use These:
```tsx
// ‚ùå WRONG - Raw HTML elements
<button>Click me</button>
<input type="text" />
<div className="card">Content</div>
<form>...</form>

// ‚ùå WRONG - Custom CSS classes for components
<div className="custom-button">Button</div>
<div className="my-modal">Modal content</div>

// ‚ùå WRONG - Third-party UI libraries
import { Button } from 'some-other-ui-lib';
```

## ‚úÖ REQUIRED PATTERNS

### Button Usage
```tsx
import { Button } from "@/components/ui/button";

// All button variants available
<Button variant="default">Primary</Button>
<Button variant="destructive">Delete</Button>
<Button variant="outline">Secondary</Button>
<Button variant="secondary">Alt</Button>
<Button variant="ghost">Subtle</Button>
<Button variant="link">Link Style</Button>
```

### Form Components
```tsx
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

<Card>
  <CardHeader>
    <CardTitle>Form Title</CardTitle>
  </CardHeader>
  <CardContent>
    <form className="space-y-4">
      <div>
        <Label htmlFor="email">Email</Label>
        <Input id="email" type="email" />
      </div>
      <Button type="submit">Submit</Button>
    </form>
  </CardContent>
</Card>
```

### Layout Components
```tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";

<Card>
  <CardHeader>
    <CardTitle>Flashcard Deck</CardTitle>
    <Badge variant="secondary">25 cards</Badge>
  </CardHeader>
  <Separator />
  <CardContent>
    Content here
  </CardContent>
</Card>
```

## üîß COMPONENT INSTALLATION

### Immediate Installation Required
Run these commands now if components are missing:

```bash
# Core components for flashcard app
npx shadcn@latest add button
npx shadcn@latest add card
npx shadcn@latest add input
npx shadcn@latest add label
npx shadcn@latest add dialog
npx shadcn@latest add badge
npx shadcn@latest add progress
npx shadcn@latest add separator
npx shadcn@latest add avatar
npx shadcn@latest add tabs
npx shadcn@latest add alert
npx shadcn@latest add toast
npx shadcn@latest add form
```

### Import Patterns
```tsx
// ‚úÖ CORRECT - Always import from @/components/ui/
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
```

## üé® STYLING RULES

### Allowed Styling
- ‚úÖ Tailwind utility classes: `className="flex items-center space-x-2"`
- ‚úÖ shadcn/ui component variants: `<Button variant="outline" size="sm">`
- ‚úÖ Tailwind responsive classes: `className="md:flex-row flex-col"`

### Forbidden Styling
- ‚ùå Custom CSS files for components
- ‚ùå Styled-components or CSS-in-JS
- ‚ùå Inline styles: `style={{backgroundColor: 'red'}}`
- ‚ùå Custom CSS classes for layout: `className="my-custom-grid"`

## üîç COMPONENT REFERENCE

### Available Components
**Form Controls:** button, input, textarea, select, checkbox, radio-group, switch, label, form
**Layout:** card, separator, sheet, tabs, accordion, collapsible, aspect-ratio
**Feedback:** alert, toast, dialog, alert-dialog, popover, tooltip, hover-card
**Navigation:** menubar, navigation-menu, breadcrumb, pagination, command
**Data Display:** table, badge, avatar, progress, skeleton, calendar
**Overlays:** drawer, context-menu, dropdown-menu

### Component Composition
Build complex interfaces by combining simple components:

```tsx
// ‚úÖ CORRECT - Composing components
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";

function FlashcardDeck({ deck }) {
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>{deck.title}</CardTitle>
        <Badge variant="secondary">{deck.cardCount} cards</Badge>
      </CardHeader>
      <CardContent>
        <Progress value={deck.progress} className="mb-4" />
        <div className="flex gap-2">
          <Button>Study</Button>
          <Button variant="outline">Edit</Button>
        </div>
      </CardContent>
    </Card>
  );
}
```

## üö® VIOLATION CONSEQUENCES
Any code that violates these rules will be immediately rejected. There are no exceptions to using shadcn/ui components exclusively.

## üìñ QUICK REFERENCE
- **Documentation:** https://ui.shadcn.com
- **Installation:** `npx shadcn@latest add [component]`
- **Import Path:** `@/components/ui/[component]`
- **Styling:** Tailwind utilities only
- **Clerk Integration:** Modal mode with shadcn/ui buttons
